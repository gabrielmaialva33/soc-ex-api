openapi: 3.0.3
info:
  title: Soc Ex
  version: 1.0.0
  description: Api documentation for Soc Ex
  contact:
    name: Gabriel M.
    email: gabrielmaialva33@gmail.com
    url: https://github.com/gabrielmaialva33
servers:
  - url: http://localhost:4000
    description: Local server
  - url: https://backend.alucard.fun
    description: Development server


paths:
  /api/sign_in:
    post:
      summary: Sign in
      description: Sign in with username or email and password
      tags:
        - Auth
      operationId: sign_in
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/json
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '200':
          description: User signed in
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
  /api/sign_up:
    post:
      summary: Sign up
      description: Sign up with first name, last name, email, username and password
      tags:
        - Auth
      operationId: sign_up
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/json
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Create'
      responses:
        '201':
          description: User signed up
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'

  /api/users:
    get:
      summary: List users
      description: List all users paginated
      tags:
        - User
      operationId: list.users
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/json
          required: true
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          required: false
        - in: query
          name: page_size
          schema:
            type: integer
            example: 10
          required: false
        - in: query
          name: order_by
          description: Order by fields for each field
          schema:
            type: array
            items:
              type: string
              enum:
                - first_name
                - last_name
                - username
                - email
            example: [ first_name, last_name, username, email ]
        - in: query
          name: order_directions
          description: Order directions for each field
          schema:
            type: array
            items:
              type: string
              enum:
                - asc
                - desc
            example: [ asc, asc, desc, desc ]
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
    post:
      summary: Create user
      description: Create a new user
      tags:
        - User
      operationId: create.user
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Create'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
  /api/users/{user_id}:
    get:
      summary: Get user
      description: Get a user by id
      tags:
        - User
      operationId: get.user
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
        - in: path
          name: user_id
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
    put:
      summary: Edit user
      description: Update a user by id
      tags:
        - User
      operationId: edit.user
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
        - in: path
          name: user_id
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
    delete:
      summary: Delete user
      description: Delete a user by id
      tags:
        - User
      operationId: delete.user
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
        - in: path
          name: user_id
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'

  /api/roles:
    get:
      summary: List roles
      description: List all roles paginated
      tags:
        - Role
      operationId: list.roles
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/json
          required: true
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          required: false
        - in: query
          name: page_size
          schema:
            type: integer
            example: 10
          required: false
        - in: query
          name: order_by
          description: Order by fields for each field
          schema:
            type: array
            items:
              type: string
              enum:
                - name
            example: [ name ]
        - in: query
          name: order_directions
          description: Order directions for each field
          schema:
            type: array
            items:
              type: string
              enum:
                - asc
                - desc
            example: [ asc ]
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
  /api/roles/{role_id}:
    get:
      summary: Get role
      description: Get a role by id
      tags:
        - Role
      operationId: get.role
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
        - in: path
          name: role_id
          schema:
            type: string
            format: uuid
            example: 9a2fcb3c-71ac-4c1c-887b-ab46a96c5587
          required: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Role found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
tags:
  - name: Auth
    description: Authentication
  - name: User
    description: User management
  - name: Role
    description: Role management
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SignIn:
      type: object
      properties:
        uid:
          type: string
          example: admin
          description: User username or email
        password:
          type: string
          example: Soc@551238
      example: { uid: admin, password: Soc@551238 }

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        first_name:
          type: string
          example: Gabriel
        last_name:
          type: string
          example: Maia
        email:
          type: string
          format: email
          example: maia@email.com
        username:
          type: string
          example: maia
        avatar_url:
          type: string
          format: url
          example: https://api.multiavatar.com/gabriel.maia.svg
        is_online:
          type: boolean
          example: true
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        inserted_at:
          type: string
          format: date-time
          example: 2021-08-01T00:00:00.000Z
        updated_at:
          type: string
          format: date-time
          example: 2021-08-01T00:00:00.000Z
      required:
        - first_name
        - last_name
        - email
        - username
      example:
        id: 80526914-5e98-48bd-b995-c329219ed6d0
        first_name: Gabriel
        last_name: Maia
        email: maia@email.com
        username: maia
        avatar_url: https://api.multiavatar.com/gabriel.maia.svg
        is_online: true
        roles:
          - id: 4b4a72f4-e448-433e-83a8-665829ce7dd9
            name: admin
            slug: ADMIN
        inserted_at: 2021-08-01T00:00:00.000Z
        updated_at: 2021-08-01T00:00:00.000Z
    User.Create:
      type: object
      properties:
        first_name:
          type: string
          example: Gabriel
        last_name:
          type: string
          example: Maia
        email:
          type: string
          format: email
          example: maia@email.com
        username:
          type: string
          example: maia
        password:
          type: string
          example: Soc@551238
        password_confirmation:
          type: string
          example: Soc@551238
      required:
        - first_name
        - last_name
        - email
        - username
        - password
        - password_confirmation
      example:
        first_name: Gabriel
        last_name: Maia
        email: maia@email.com
        username: maia
        password: Soc@551238
        password_confirmation: Soc@551238

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: admin
        slug:
          type: string
          example: ADMIN
      required:
        - name
        - slug
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        name: admin
        slug: ADMIN
        inserted_at: 2021-08-01T00:00:00.000Z
        updated_at: 2021-08-01T00:00:00.000Z

    Pagination:
      type: object
      properties:
        page_size:
          type: integer
          example: 10
        current_page:
          type: integer
          example: 1
        end_cursor:
          type: string
        next_page:
          type: integer
          example: 2
        previous_page:
          type: integer
          example: 1
        start_cursor:
          type: string
        total_count:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10
        has_next_page:
          type: boolean
          example: true
        has_previous_page:
          type: boolean
          example: false
      example:
        page_size: 10
        current_page: 1
        next_page: 2
        previous_page: 1
        total_count: 100
        total_pages: 10
        has_next_page: true
        has_previous_page: false

    Api.Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid credentials
        status:
          type: integer
          example: 401
        message:
          type: string
          example: Invalid credentials
        path:
          type: string
          example: /api/users
        timestamp:
          type: string
          format: date-time
          example: 2021-08-01T00:00:00.000Z
      example:
        error: Invalid credentials
        status: 401
        message: Invalid credentials
        path: /api/users
        timestamp: 2021-08-01T00:00:00.000Z
