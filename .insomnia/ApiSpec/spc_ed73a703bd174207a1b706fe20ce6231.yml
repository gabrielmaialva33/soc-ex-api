_id: spc_ed73a703bd174207a1b706fe20ce6231
type: ApiSpec
parentId: wrk_08aac754bd244816a6671f7ff3e801d9
modified: 1691792274538
created: 1683563734321
fileName: Soc Ex
contents: |+
  openapi: 3.0.3
  info:
    title: SocEx API
    version: 1.0.0
    description: Documentation for the SocEx API
    contact:
      name: Gabriel M.
      email: gabrielmaialva33@gmail.com
      url: https://github.com/gabrielmaialva33
  servers:
    - url: http://localhost:4000
      description: Local server
    - url: https://api.mrootx.shop
      description: Development server

  tags:
    - name: Users
      description: User management

  paths:
    /api/users/paginate:
      get:
        summary: Paginate users
        description: List all users with pagination
        tags:
          - Users
        operationId: paginate.users
        parameters:
          - in: header
            name: Content-Type
            schema:
              type: string
              default: application/json
            required: true
          - in: query
            name: page
            schema:
              type: integer
              example: 1
            required: false
          - in: query
            name: page_size
            schema:
              type: integer
              example: 10
            required: false
          # ?order_by[]=first_name&order_by[]=last_name
          - in: query
            name: order_by
            description: Order by fields
            schema:
              type: array
              items:
                type: string
                enum:
                  - first_name
                  - last_name
                  - email
                  - created_at
                  - updated_at
              example: [ first_name, last_name ]
        security:
          - bearerAuth: [ ]
        responses:
          '200':
            description: List of users
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
                    pagination:
                      $ref: '#/components/schemas/Pagination'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
    /api/users:
      get:
        summary: List users
        description: List all users
        tags:
          - Users
        operationId: list.users
        parameters:
          - in: header
            name: Content-Type
            schema:
              type: string
              example: application/json
            required: true
          - in: query
            name: page
            schema:
              type: integer
              example: 1
            required: false
          - in: query
            name: limit
            schema:
              type: integer
              example: 10
            required: false
        security:
          - bearerAuth: [ ]
        responses:
          '200':
            description: List of users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
      post:
        summary: Create user
        description: Create a new user
        tags:
          - Users
        operationId: create.user
        parameters:
          - in: header
            name: Content-Type
            schema:
              type: string
              example: application/json
            required: true
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Create'
        responses:
          '201':
            description: User created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
    /api/users/{user_id}:
      get:
        summary: Get user
        description: Get a user by id
        tags:
          - Users
        operationId: get.user
        parameters:
          - in: header
            name: Content-Type
            schema:
              type: string
              example: application/json
            required: true
          - in: path
            name: user_id
            schema:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
            required: true
        security:
          - bearerAuth: [ ]
        responses:
          '200':
            description: User found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
      put:
        summary: Edit user
        description: Update a user by id
        tags:
          - Users
        operationId: edit.user
        parameters:
          - in: header
            name: Content-Type
            schema:
              type: string
              example: application/json
            required: true
          - in: path
            name: user_id
            schema:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
            required: true
        security:
          - bearerAuth: [ ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          '200':
            description: User updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
      delete:
        summary: Delete user
        description: Delete a user by id
        tags:
          - Users
        operationId: delete.user
        parameters:
          - in: header
            name: Content-Type
            schema:
              type: string
              example: application/json
            required: true
          - in: path
            name: user_id
            schema:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
            required: true
        security:
          - bearerAuth: [ ]
        responses:
          '204':
            description: User deleted
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Api.Error'
  components:
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
    schemas:
      User:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          first_name:
            type: string
            example: Gabriel
          last_name:
            type: string
            example: Maia
          email:
            type: string
            format: email
            example: maia@email.com
          username:
            type: string
            example: maia
          is_online:
            type: boolean
            example: true
          inserted_at:
            type: string
            format: date-time
            example: 2021-08-01T00:00:00.000Z
          updated_at:
            type: string
            format: date-time
            example: 2021-08-01T00:00:00.000Z
        required:
          - first_name
          - last_name
          - email
          - username
        example:
          id: 123e4567-e89b-12d3-a456-426614174000
          first_name: Gabriel
          last_name: Maia
          email: maia@email.com
          username: maia
          is_online: true
          inserted_at: 2021-08-01T00:00:00.000Z
          updated_at: 2021-08-01T00:00:00.000Z
      User.Create:
        type: object
        properties:
          first_name:
            type: string
            example: Gabriel
          last_name:
            type: string
            example: Maia
          email:
            type: string
            format: email
            example: maia@email.com
          username:
            type: string
            example: maia
          password:
            type: string
            example: Soc@551238
          password_confirmation:
            type: string
            example: Soc@551238
        required:
          - first_name
          - last_name
          - email
          - username
          - password
          - password_confirmation
        example:
          first_name: Gabriel
          last_name: Maia
          email: maia@email.com
          username: maia
          password: Soc@551238
          password_confirmation: Soc@551238

      Pagination:
        type: object
        properties:
          page_size:
            type: integer
            example: 10
          current_page:
            type: integer
            example: 1
          end_cursor:
            type: string
          next_page:
            type: integer
            example: 2
          previous_page:
            type: integer
            example: 1
          start_cursor:
            type: string
          total_count:
            type: integer
            example: 100
          total_pages:
            type: integer
            example: 10
          has_next_page:
            type: boolean
            example: true
          has_previous_page:
            type: boolean
            example: false
        example:
          page_size: 10
          current_page: 1
          next_page: 2
          previous_page: 1
          total_count: 100
          total_pages: 10
          has_next_page: true
          has_previous_page: false

      Api.Error:
        type: object
        properties:
          error:
            type: string
            example: Invalid credentials
          status:
            type: integer
            example: 401
          message:
            type: string
            example: Invalid credentials
          path:
            type: string
            example: /api/users
          timestamp:
            type: string
            format: date-time
            example: 2021-08-01T00:00:00.000Z
        example:
          error: Invalid credentials
          status: 401
          message: Invalid credentials
          path: /api/users
          timestamp: 2021-08-01T00:00:00.000Z

contentType: yaml
