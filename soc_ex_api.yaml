openapi: 3.0.3
info:
  title: SocEx API
  version: 1.0.0
  description: Documentation for the SocEx API
  contact:
    name: Gabriel M.
    email: gabrielmaialva33@gmail.com
    url: https://github.com/gabrielmaialva33
servers:
  - url: http://localhost:4000
    description: Local server

tags:
  - name: Users
    description: User management

paths:
  /api/users:
    get:
      summary: List all users
      description: List all users
      tags:
        - Users
      operationId: list.users
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          required: false
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
    post:
      summary: Create a new user
      description: Create a new user
      tags:
        - Users
      operationId: create.user
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Create'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
  /api/users/{user_id}:
    get:
      summary: Get a user by id
      description: Get a user by id
      tags:
        - Users
      operationId: get.user
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
        - in: path
          name: user_id
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
    put:
      summary: Update a user by id
      description: Update a user by id
      tags:
        - Users
      operationId: update.user
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
        - in: path
          name: user_id
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
    delete:
      summary: Delete a user by id
      description: Delete a user by id
      tags:
        - Users
      operationId: delete.user
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
          required: true
        - in: path
          name: user_id
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          required: true
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api.Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        first_name:
          type: string
          example: Gabriel
        last_name:
          type: string
          example: Maia
        email:
          type: string
          format: email
          example: maia@email.com
        username:
          type: string
          example: maia
        is_online:
          type: boolean
          example: true
        inserted_at:
          type: string
          format: date-time
          example: 2021-08-01T00:00:00.000Z
        updated_at:
          type: string
          format: date-time
          example: 2021-08-01T00:00:00.000Z
      required:
        - first_name
        - last_name
        - email
        - username
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        first_name: Gabriel
        last_name: Maia
        email: maia@email.com
        username: maia
        is_online: true
        inserted_at: 2021-08-01T00:00:00.000Z
        updated_at: 2021-08-01T00:00:00.000Z
    User.Create:
      type: object
      properties:
        first_name:
          type: string
          example: Gabriel
        last_name:
          type: string
          example: Maia
        email:
          type: string
          format: email
          example: maia@email.com
        username:
          type: string
          example: maia
        password:
          type: string
          example: Soc@551238
        password_confirmation:
          type: string
          example: Soc@551238
      required:
        - first_name
        - last_name
        - email
        - username
        - password
        - password_confirmation
      example:
        first_name: Gabriel
        last_name: Maia
        email: maia@email.com
        username: maia
        password: Soc@551238
        password_confirmation: Soc@551238

    Api.Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid credentials
        status:
          type: integer
          example: 401
        message:
          type: string
          example: Invalid credentials
        path:
          type: string
          example: /api/users
        timestamp:
          type: string
          format: date-time
          example: 2021-08-01T00:00:00.000Z
      example:
        error: Invalid credentials
        status: 401
        message: Invalid credentials
        path: /api/users
        timestamp: 2021-08-01T00:00:00.000Z

